reachcluster <- na.omit(reachcluster)
reachcluster <- scale(reachcluster)
reachcluster <- data.frame(data_noDCD$Idstudy, reachcluster)
##Running cluster analysis
#USING R BASIC STATS
# Dissimilarity matrix
d <- dist(reachcluster, method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
#CLUSTER WITH AGNES AND THE CLUSTER PACKAGE
# Compute with agnes
hc2 <- agnes(reachcluster, method = "complete")
# Agglomerative coefficient - which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).
hc2$ac
# methods to assess
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(reachcluster, method = x)$ac
}
map_dbl(m, ac)
#Ward is the best for our data too - 99.9%
hc3 <- agnes(reachcluster, method = "ward")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of agnes")
#DIVISIVE CLUSTERING
# compute divisive hierarchical clustering
hc4 <- diana(reachcluster)
# Divise coefficient; amount of clustering structure found
hc4$dc
# plot dendrogram
pltree(hc4, cex = 0.6, hang = -1, main = "Dendrogram of diana")
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
# Cut tree into 4 groups
sub_grp <- cutree(hc5, k = 4)
# Number of members in each cluster
table(sub_grp)
plot(hc5, cex = 0.6)
rect.hclust(hc5, k = 4, border = 2:5)
# Cut tree into 14 groups
sub_grp <- cutree(hc5, k = 14)
# Number of members in each cluster
table(sub_grp)
plot(hc5, cex = 0.6)
rect.hclust(hc5, k = 14, border = 2:10)
fviz_nbclust(reachcluster, FUN = hcut, method = "wss")
fviz_nbclust(reachcluster, FUN = hcut, method = "silhouette")
# Compute k-means clustering with k = 4
set.seed(123)
final <- kmeans(reachcluster, 4, nstart = 25)
fviz_cluster(final, data = reachcluster)
RClusters <- data_noDCD %>%
mutate(Cluster = final$cluster)
RClusters %>%
group_by(Cluster) %>%
summarise_all("mean")
fviz_nbclust(graspcluster, FUN = hcut, method = "wss")
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
# Cut tree into 4 groups
sub_grp <- cutree(hc4, k = 4)
# Number of members in each cluster
table(sub_grp)
plot(hc4, cex = 0.6)
# Divise coefficient; amount of clustering structure found
hc4$dc
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of agnes")
hc3 <- agnes(reachcluster, method = "ward")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of agnes")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of Reaching Kinematics")
View(hc3)
hc3 <- agnes(reachcluster, method = "ward", keep.data = TRUE)
WARD3 <- cutree(as.hclust(hc3), h = 4)
agnesward <- data.frame(data_noDCD, WARD3)
View(agnesward)
WARD3 <- cutree(as.hclust(hc3), h = 4)
agnesward <- data.frame(data_noDCD, WARD3)
WARD3 <- cutree(as.hclust(reachcluster), h = 4)
WARD3 <- cutree(hc3, h = 4)
agnesward <- data.frame(data_noDCD, WARD3)
hc3 <- agnes(reachcluster, method = "ward")
WARD3 <- cutree(hc3, h = 4)
print(WARD3)
WARD3 <- cutree(reachcluster, h = 4)
saveRDS(hc3,"hc3.RDS") # Save it
WARD3 <- cutree(hc3, h = 4)
WARD3 <- cutree(hc3, h = 2)
(ck4 <- cutree(hc3, k = 4))
(ch4 <- cutree(as.hclust(hc3), h = 4))
stopifnot(identical(unname(ch4), ck4))
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
# Cut tree into 4 groups
sub_grp <- cutree(hc4, k = 4)
# Number of members in each cluster
table(sub_grp)
plot(hc4, cex = 0.6)
rect.hclust(hc4, k = 4, border = 2:5)
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
# Cut tree into 4 groups
sub_grp <- cutree(hc4, k = 4)
# Number of members in each cluster
table(sub_grp)
plot(hc4, cex = 0.6)
require("knitr")
library(ggplot2)
library("nlme")
library(ggplot2)
library(tidyverse)
library(knitr)
library(dplyr)
library(MuMIn)
library(scales)
library(readxl)
library(readr)
library(tidyr)
library(Hmisc)
library(plyr)
library(RColorBrewer)
library(reshape2)
library(irr)
library(rmcorr)
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(dendextend) # for comparing two dendrograms
reachcluster <- data.frame (data_noDCD$DecelerationTme, data_noDCD$ReachingTime, data_noDCD$WristTrajectory)
data_noDCD<-read.csv("REACHtoGRASP_MABCdef.csv", header=T, sep=",")
str(data_noDCD)
summary(data_noDCD)
reachcluster <- data.frame (data_noDCD$DecelerationTme, data_noDCD$ReachingTime, data_noDCD$WristTrajectory)
reachcluster <- na.omit(reachcluster)
reachcluster <- scale(reachcluster)
reachcluster <- data.frame(data_noDCD$Idstudy, reachcluster)
# Dissimilarity matrix
d <- dist(reachcluster, method = "euclidean")
# Dissimilarity matrix
d <- dist(reachcluster, method = "euclidean")
# Hierarchical clustering using Complete Linkage
hc1 <- hclust(d, method = "complete" )
# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
hc3 <- agnes(reachcluster, method = "ward")
hc3 <- agnes(reachcluster, method = "ward")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of Reaching Kinematics")
WARD3 <- cutree(hc3, h = 2)
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
# Cut tree into 4 groups
sub_grp <- cutree(hc4, k = 4)
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
# Cut tree into 4 groups
sub_grp <- cutree(hc5, k = 4)
# Number of members in each cluster
table(sub_grp)
sub_grp <- cutree(hc3, k = 4)
# Number of members in each cluster
table(sub_grp)
# Cut tree into 4 groups
sub_grp <- cutree(hc5, k = 4)
# Number of members in each cluster
table(sub_grp)
View(reachcluster)
# Compute k-means clustering with k = 4
final <- kmeans(reachcluster, centers = 4, nstart = 25)
# Ward Hierarchical Clustering with Bootstrapped p values
library(pvclust)
install.packages("pvclust")
# Ward Hierarchical Clustering with Bootstrapped p values
library(pvclust)
fit <- pvclust(reachcluster, method.hclust="ward",
method.dist="euclidean")
plot(fit) # dendogram with p values
# add rectangles around groups highly supported by the data
pvrect(fit, alpha=.95)
data(Boston, package = "MASS")
View(fit)
## multiscale bootstrap resampling (non-parallel)
boston.pv <- pvclust(Boston, nboot=100, parallel=FALSE)
View(Boston)
# Compute k-means clustering with k = 4
final <- kmeans(reachcluster, centers = 4, nstart = 25)
View(final)
RClusters <- data_noDCD %>%
mutate(Cluster = final$cluster)
View(final)
rect.hclust(hc3, k = 4, border = 2:5)
hc3 <- agnes(reachcluster, method = "ward")
rect.hclust(hc3, k = 4, border = 2:5)
rect.hclust(hc5, k = 4, border = 2:5)
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
plot(hc5, cex = 0.6)
rect.hclust(hc5, k = 4, border = 2:5)
aggregate(reachcluster,by=list(fit$cluster),FUN=mean)
# get cluster means
aggregate(reachcluster,by=list(fit$cluster),FUN=mean)
View(hc1)
# methods to assess
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(graspcluster, method = x)$ac
}
map_dbl(m, ac)
graspcluster <- data.frame ( data_noDCD$GraspingTime , data_noDCD$MaxApTime , data_noDCD$AmplMaxAp)
graspcluster <- na.omit(graspcluster)
graspcluster <- scale(graspcluster)
graspcluster <- data.frame(data_noDCD$Idstudy, graspcluster)
# function to compute coefficient
ac <- function(x) {
agnes(graspcluster, method = x)$ac
}
map_dbl(m, ac)
hc3 <- agnes(graspcluster, method = "ward")
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of Grasping Kinematics")
GClusters <- data_noDCD %>%
mutate(Cluster = final$cluster)
GClusters %>%
group_by(Cluster) %>%
summarise_all("mean")
View(GClusters)
aggregate(graspcluster,by=list(GClusters$Cluster),FUN=mean)
aggregate(GClusters,by=list(GClusters$Cluster),FUN=mean)
RClusters <- data_noDCD %>%
mutate(Cluster = final$cluster)
# Compute k-means clustering with k = 4
final <- kmeans(reachcluster, centers = 4, nstart = 25)
RClusters <- data_noDCD %>%
mutate(Cluster = final$cluster)
aggregate(RClusters,by=list(RClusters$Cluster),FUN=mean)
require("knitr")
library(ggplot2)
library("nlme")
library(ggplot2)
library(tidyverse)
library(knitr)
library(dplyr)
library(MuMIn)
library(scales)
library(readxl)
library(readr)
library(tidyr)
library(Hmisc)
library(plyr)
library(RColorBrewer)
library(reshape2)
library(irr)
library(rmcorr)
library(ggdist)
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(dendextend) # for comparing two dendrograms
install.packages(blavaan, INSTALL_opts="--no-multiarch")
remotes::install_github("ecmerkle/blavaan", INSTALL_opts = "--no-multiarch")
library(blavaan)
install.packages(blavaan, INSTALL_opts="--no-multiarch")
install.packages("blavaan")
library(blavaan)
require("knitr")
library(ggplot2)
library("nlme")
library(ggplot2)
library(tidyverse)
library(knitr)
library(dplyr)
library(MuMIn)
library(scales)
library(readxl)
library(readr)
library(tidyr)
library(Hmisc)
library(plyr)
library(RColorBrewer)
library(reshape2)
library(irr)
library(rmcorr)
library(ggdist)
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(dendextend) # for comparing two dendrograms
install.packages(blavaan, INSTALL_opts="--no-multiarch")
library(rjags)
library(blavaan)
library("blavaan")
remove.packages("blavaan", lib="~/R/win-library/4.0")
install.packages("blavaan")
library("blavaan")
install.packages("blavaan", type="source")
library("blavaan")
install.packages("blavaan")
library("blavaan")
install.packages("blavaan")
library("blavaan")
install.packages("blavaan")
library("blavaan")
library(lavaan)
library("blavaan")
# libPaths
.libPaths()
update.packages(checkBuilt = TRUE, ask = FALSE)
library(blavaan)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(hms)
library(rmcorr)
library(haven)
library(BlandAltmanLeh)
library(pwr)
library(readxl)
MinutesPerStateLONG2 <- read_excel("MinutesPerStateLONG2.xlsx")
Nprop <- c(MinutesPerStateLONG2$NREM/MinutesPerStateLONG2$TOT)
Rprop <- c(MinutesPerStateLONG2$REM/MinutesPerStateLONG2$TOT)
Iprop <- c(MinutesPerStateLONG2$IND/MinutesPerStateLONG2$TOT)
MinutesPerStateLONG2 <- data.frame(MinutesPerStateLONG2, Nprop, Rprop, Iprop)
View(MinutesPerStateLONG2)
ggplot(data=SS9N2Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Maual state codg`, group=1)) +
geom_line()+ ggtitle('Hypnogram of 12-month-old') +
geom_point() + theme_classic()
SS9VisualCoding <- read_excel("SS9ManualCoding.xlsx")
SS9N1Visual <- SS9VisualCoding[639:1324,]
SS9N2Visual <- SS9VisualCoding[3570:4117, ]
SS9N3Visual <- SS9VisualCoding [5011:5580, ]
SS9N4Visual <- SS9VisualCoding[6419:7014, ]
N1 <- unlist(strsplit(SS9N1Visual$`Maual state codg`,""))
length(N1 [N1 == "n"])
length(N1 [N1 == "r"])
length(N1 [N1 == "i"])
length(N1 [N1 == "w"])
N2 <- unlist(strsplit(SS9N2Visual$`Maual state codg`,""))
length(N2 [N2 == "n"])
length(N2 [N2 == "r"])
length(N2 [N2 == "i"])
length(N2 [N2 == "w"])
N3 <- unlist(strsplit(SS9N3Visual$`Maual state codg`,""))
length(N3 [N3 == "n"])
length(N3 [N3 == "r"])
length(N3 [N3 == "i"])
length(N3 [N3 == "w"])
N4 <- unlist(strsplit(SS9N4Visual$`Maual state codg`,""))
length(N4 [N4 == "n"])
length(N4 [N4 == "r"])
length(N4 [N4 == "i"])
length(N4 [N4 == "w"])
ggplot(data=SS9N2Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Maual state codg`, group=1)) +
geom_line()+ ggtitle('Hypnogram of 12-month-old') +
geom_point() + theme_classic()
ggplot(data=SS9N2Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Maual state codg`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 12-month-old') +
geom_point() + theme_classic()
ggplot(data=SS9N1Visual, aes(x=`Timestamp (Eastern Standard Time)`, y= `Maual state codg`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 12-month-old') +
geom_point() + theme_classic()
ggplot(data=SS9N2Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Maual state codg`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 12-month-old') +
geom_point() + theme_classic()
ggplot(data=SS9N3Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Maual state codg`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 12-month-old') +
geom_point() + theme_classic()
ggplot(data=SS9N4Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Maual state codg`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 12-month-old') +
geom_point() + theme_classic()
SS14VisualCoding <- read_excel("SS14ManualCoding.xlsx")
SS14N1Visual <- SS14VisualCoding[295:891,]
SS14N2Visual <- SS14VisualCoding[1726:2334, ]
SS14N3Visual <- SS14VisualCoding [3223:3851, ]
SS14N4Visual <- SS14VisualCoding[4631:5357, ]
SS14N5Visual <- SS14VisualCoding[6002:6624, ]
N1 <- unlist(strsplit(SS14N1Visual$`Manual state coding`,""))
length(N1 [N1 == "n"])
length(N1 [N1 == "r"])
length(N1 [N1 == "i"])
length(N1 [N1 == "w"])
N2 <- unlist(strsplit(SS14N2Visual$`Manual state coding`,""))
length(N2 [N2 == "n"])
length(N2 [N2 == "r"])
length(N2 [N2 == "i"])
length(N2 [N2 == "w"])
N3 <- unlist(strsplit(SS14N3Visual$`Manual state coding`,""))
length(N3 [N3 == "n"])
length(N3 [N3 == "r"])
length(N3 [N3 == "i"])
length(N3 [N3 == "w"])
N4 <- unlist(strsplit(SS14N4Visual$`Manual state coding`,""))
length(N4 [N4 == "n"])
length(N4 [N4 == "r"])
length(N4 [N4 == "i"])
length(N4 [N4 == "w"])
N5 <- unlist(strsplit(SS14N5Visual$`Manual state coding`,""))
length(N5 [N5 == "n"])
length(N5 [N5 == "r"])
length(N5 [N5 == "i"])
length(N5 [N5 == "w"])
ggplot(data=SS14N4Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
ggplot(data=SS14N4Visual, aes(x=SS14N1Visual$Time, y=SS14N1Visual$`Manual state coding`) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
ggplot(data=SS14N4Visual, aes(x=SS14N1Visual$Time, y=SS14N1Visual$`Manual state coding`)) +
ggplot(data=SS14N4Visual, aes(x=Time, y=`Manual state coding`)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
SS14VisualCoding <- read_excel("SS14ManualCoding.xlsx")
SS14N1Visual <- SS14VisualCoding[295:891,]
SS14N2Visual <- SS14VisualCoding[1726:2334, ]
SS14N3Visual <- SS14VisualCoding [3223:3851, ]
SS14N4Visual <- SS14VisualCoding[4631:5357, ]
SS14N5Visual <- SS14VisualCoding[6002:6624, ]
N1 <- unlist(strsplit(SS14N1Visual$`Manual state coding`,""))
length(N1 [N1 == "n"])
length(N1 [N1 == "r"])
length(N1 [N1 == "i"])
length(N1 [N1 == "w"])
N2 <- unlist(strsplit(SS14N2Visual$`Manual state coding`,""))
length(N2 [N2 == "n"])
length(N2 [N2 == "r"])
length(N2 [N2 == "i"])
length(N2 [N2 == "w"])
N3 <- unlist(strsplit(SS14N3Visual$`Manual state coding`,""))
length(N3 [N3 == "n"])
length(N3 [N3 == "r"])
length(N3 [N3 == "i"])
length(N3 [N3 == "w"])
N4 <- unlist(strsplit(SS14N4Visual$`Manual state coding`,""))
length(N4 [N4 == "n"])
length(N4 [N4 == "r"])
length(N4 [N4 == "i"])
length(N4 [N4 == "w"])
N5 <- unlist(strsplit(SS14N5Visual$`Manual state coding`,""))
length(N5 [N5 == "n"])
length(N5 [N5 == "r"])
length(N5 [N5 == "i"])
length(N5 [N5 == "w"])
ggplot(data=SS14N4Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
ggplot(data=SS14N1Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
ggplot(data=SS14N1Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
ggplot(data=SS14N2Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic(
ggplot(data=SS14N2Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
ggplot(data=SS14N3Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
ggplot(data=SS14N2Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
ggplot(data=SS14N3Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
ggplot(data=SS14N4Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 18-month-old') +
geom_point() + theme_classic()
SS15VisualCoding <- read_excel("SS15ManualCoding.xlsx")
SS15N1Visual <- SS15VisualCoding[720:1357,]
SS15N2Visual <- SS15VisualCoding[2178:2769, ]
SS15N3Visual <- SS15VisualCoding [3640:4279, ]
SS15N4Visual <- SS15VisualCoding[7907:8565, ]
N1 <- unlist(strsplit(SS15N1Visual$`Manual state coding`,""))
length(N1 [N1 == "n"])
length(N1 [N1 == "r"])
length(N1 [N1 == "i"])
length(N1 [N1 == "w"])
N2 <- unlist(strsplit(SS15N2Visual$`Manual state coding`,""))
length(N2 [N2 == "n"])
length(N2 [N2 == "r"])
length(N2 [N2 == "i"])
length(N2 [N2 == "w"])
N3 <- unlist(strsplit(SS15N3Visual$`Manual state coding`,""))
length(N3 [N3 == "n"])
length(N3 [N3 == "r"])
length(N3 [N3 == "i"])
length(N3 [N3 == "w"])
N4 <- unlist(strsplit(SS15N4Visual$`Manual state coding`,""))
length(N4 [N4 == "n"])
length(N4 [N4 == "r"])
length(N4 [N4 == "i"])
length(N4 [N4 == "w"])
ggplot(data=SS15N4Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 24-month-old') +
geom_point() + theme_classic()
ggplot(data=SS15N2Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 24-month-old') +
geom_point() + theme_classic()
ggplot(data=SS15N3Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 24-month-old') +
geom_point() + theme_classic()
ggplot(data=SS15N5Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 24-month-old') +
geom_point() + theme_classic()
ggplot(data=SS15N4Visual, aes(x=`Timestamp (Eastern Standard Time)`, y=`Manual state coding`, group=1)) +
geom_line()+ ggtitle('Example hypnogram from a 24-month-old') +
geom_point() + theme_classic()
rmarkdown::render_site()
View(Boston)
View(graspcluster)
summary(graspcluster)
setwd("C:/Users/mhorg/OneDrive/Documents/GitHub/MNHwebsite")
